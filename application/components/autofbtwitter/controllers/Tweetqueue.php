<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');//scheduler controllerclass Tweetqueue extends Comp{	protected $m_view = 'user/dashboard';	public function __construct() {				parent::__construct();		//FAIL			$this->need_login();	}	/*	 *controllers	 */  	 	function index($offset=0){							$this->data['title'] = 'Schedule Queue';			$this->model('MQueue');							$conf['base_url'] = site_url('tweetqueue/index');		$actions[] = array('Delete',site_url('tweetqueue/delete'));				$actions[] = array('Edit',site_url('tweetqueue/edit'));			$actions[] = array('Message',site_url('tweetqueue/message'),base_url('images/comment.png'));			$cols[] = array('Name','name',130,'scope="col" class="rounded-company"','asc');		$cols[] = array('Username','username',130,'scope="col" class="rounded"','asc');		$cols[] = array('Date','start_date',50,'scope="col" class="rounded"','asc');						$cols[] = array('Time','start_hhmm',50,'scope="col" class="rounded"');						$cols[] = array('Timezone','timezone',150,'scope="col" class="rounded"');						$criteria = array('com_autofbtwitter_queue.id_user'=>$this->session->userdata('userid'));		$empty_msg = '<div class="warning_box">You have not added any queue yet. please add</div>';		$this->data['table'] = $this->create_table($conf,$cols,$actions,$this->MQueue,$criteria,$empty_msg );				$this->view('queue_tweet_list',$this->data);	}	 	function add(){								$this->load->helper('timezone');		$this->data['title'] = 'Tweets Queue';		$this->data['jsfiles'] = array('jquery-ui-1.8.16.custom.min.js');		$this->data['cssfiles'] = array('redmond/jquery-ui-1.8.16.custom.css');				$this->data['usernames'] = $this->get_twitter_users();					$this->data['interval_type'] = $this->get_interval_type();		$this->data['queue'] = null;		$this->view('queue_tweet_entry',$this->data);	}	function edit(){		$id = $this->input->post('itemid');		if(empty($id))			die('invalid itemid');		$id = intval($id);		$this->model('MQueue');		$criteria = array('com_autofbtwitter_queue.id'=>$id,'com_autofbtwitter_queue.id_user'=>intval($this->session->userdata('userid')));		$queue = $this->MQueue->get_by($criteria);		if($queue==null)		{			$this->session->set_flashdata('error','queue can not be found');			redirect(base_url('tweetqueue/index') );			return;		}		$this->load->helper('timezone');				$this->data['title'] = 'Edit Tweet Queue';		$this->data['jsfiles'] = array('jquery-ui-1.8.16.custom.min.js');		$this->data['cssfiles'] = array('redmond/jquery-ui-1.8.16.custom.css');							$this->data['usernames'] = $this->get_twitter_users();				$this->data['interval_type'] = $this->get_interval_type();				$this->data['queue'] = $queue[0];		$this->view('queue_tweet_entry',$this->data);	}	function delete(){		$id = $this->input->post('itemid');		if(empty($id)){			$this->session->set_flashdata('error','Item id is empty');		}		$id = intval($id);		$this->model('MQueue');		$criteria = array('com_autofbtwitter_queue.id'=>$id,'com_autofbtwitter_queue.id_user'=>intval($this->session->userdata('userid')));				$queue = $this->MQueue->get_by($criteria);		if($queue==null){			$this->session->set_flashdata('error','Queue can not be found');		}else{			$this->model('MTweetQueueMessage');					$criteria = array(				'id_user'=>$this->session->userdata('userid')				,'com_autofbtwitter_queue_id'=>intval($id)			);			$message = $this->MTweetQueueMessage->get_by($criteria);			if($message!=null){				$this->session->set_flashdata('error','Queue can not be deleted because it has some messages. Please delete the message first.');			}else			{				if($this->MQueue->delete($id)==TRUE){					$this->session->set_flashdata('info','Queue deleted');				}else{					$this->session->set_flashdata('error','Queue can not be deleted');				}			}		}		redirect(base_url('tweetqueue/index') );	}	function message(){		$id = $_REQUEST['itemid'];		if(empty($id))			die('invalid itemid');		$id = intval($id);		$this->session->set_userdata('queue_id',$id);		redirect(site_url('tweetmessage/index'));	}	/*process*/	function get_twitter_users(){		$this->model('MAccount');		$criteria = array('id_user'=>intval($this->session->userdata('userid')),'type'=>1);		$usernames = $this->MAccount->get_by($criteria);		$data =array();		foreach($usernames as $user){			$data[$user['id']] = $user['username'];		}		return $data;	}	function get_interval_type(){		$this->model('MQueue');		$interval_type = $this->MQueue->get_interval_type();		$data =array();		foreach($interval_type as $type){			$data[$type['id']] = $type['name'];		}		return $data;	}	function username_check($str)	{		$this->model('MAccount');		$account = $this->MAccount->get(intval($str));				if($account !=null){			if(intval($account['id_user'])==intval($this->session->userdata('userid'))){				return TRUE;			}		}		$this->form_validation->set_message('username_check','Invalid Username');		return FALSE;			}	function checkDate($date)	{		if (!isset($date) || $date=="")		{			return FALSE;		}	   		list($mm,$dd,$yy)=explode("/",$date);		if ($dd!="" && $mm!="" && $yy!="")		{			return checkdate($mm,$dd,$yy);		}	   		return FALSE;	}	function schedule_date_check($str){		if($this->checkDate($str)==FALSE){						$this->form_validation->set_message('schedule_date_check','Invalid Date');			return FALSE;		}		return TRUE;			}	function date_check($str){		if($this->checkDate($str)==FALSE){						$this->form_validation->set_message('date_check','Invalid Date');			return FALSE;		}		return TRUE;			}	function hhmm_check($str){		if(strstr($str,':')!==FALSE)		{					list($hh,$mm)=explode(":",$str);			if($hh!='' && $mm !=''){				if(intval($hh)>=0 && intval($hh)<24 && intval($mm)>=0 && intval($mm)<60){					return TRUE;				}						}		}		$this->form_validation->set_message('hhmm_check','Invalid Time');		return FALSE; 	}	function timezone_check($str){				try{			new DateTimeZone($str);		}catch(Exception $e){			$this->form_validation->set_message('timezone_check','Invalid Timezone');			return FALSE;		}		return TRUE;	}	function saveValidate()	{				$this->form_validation->set_rules('name', 'lang:Name', 'required');		$this->form_validation->set_rules('username', 'lang:Username', 'required|integer|callback_username_check');		$this->form_validation->set_rules('start_date', 'lang:Start date', 'required|callback_date_check');				$this->form_validation->set_rules('start_hhmm','lang:Start time', 'required|callback_hhmm_check');		$this->form_validation->set_rules('timezone', 'lang:Time zone', 'required|callback_timezone_check');		$this->form_validation->set_rules('interval', 'lang:Interval', 'required|integer');		return ($this->form_validation->run());	}	function save(){		if($this->saveValidate()==FALSE)		{			$this->add();			return;		}		else         		{						$this->model('MQueue');						$queue = $this->bind($this->MQueue);			$queue['com_autofbtwitter_account_id'] = intval($this->input->post('username'));						$queue['id_user'] = intval($this->session->userdata('userid'));			if($this->MQueue->save($queue)==TRUE){								$this->model('MTweetQueueMessage');					$this->MTweetQueueMessage->recalculate_schedule_time($queue['id']);				$this->session->set_flashdata('info','Queue saved');			}else				$this->session->set_flashdata('error','Error saving queue');					}				redirect(base_url('tweetqueue/index'));	}	}?>